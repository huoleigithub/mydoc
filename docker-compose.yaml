version: "3.7"
services:

  nginx:
    hostname: nginx
    container_name: nginx
    image: nginx
    volumes:
      - ./deploy/nginx/conf/nginx.conf:/etc/nginx/nginx.conf
      - ./deploy/nginx/log:/var/log/nginx
      - ./deploy/nginx/html:/html
    ports:
      - "88:88"
    restart: "no"
    depends_on:
      - nacos1
      - nacos2
      - nacos3

  nacos1: &nacos1
    hostname: nacos1
    container_name: nacos1
    build:
      context: .
      dockerfile: deploy/nacos/Dockerfile
    image: mydoc/nacos-server:v2.2.0
    volumes:
      - ./deploy/nacos/nacos-logs/nacos1:/home/nacos/logs
    ports:
      - "8848:8848"
      - "9848:9848"
      - "9555:9555"
    env_file:
      - deploy/env/nacos-hostname.env
    restart: "no"
    depends_on:
      mysql_master:
        condition: service_healthy

  nacos2:
    <<: *nacos1
    hostname: nacos2
    container_name: nacos2
    volumes:
      - ./deploy/nacos/nacos-logs/nacos2:/home/nacos/logs
    ports:
      - "8849:8848"
      - "9849:9848"
    env_file:
      - deploy/env/nacos-hostname.env
    restart: "no"
    depends_on:
      mysql_master:
        condition: service_healthy

  nacos3:
    <<: *nacos1
    hostname: nacos3
    container_name: nacos3
    volumes:
      - ./deploy/nacos/nacos-logs/nacos3:/home/nacos/logs
    ports:
      - "8850:8848"
      - "9850:9848"
    env_file:
      - deploy/env/nacos-hostname.env
    restart: "no"
    depends_on:
      mysql_master:
        condition: service_healthy

  mysql_master: &mysql_master
    hostname: mysql_master
    container_name: mysql_master
    build:
      context: .
      dockerfile: deploy/mysql/Dockerfile
    image: mydoc/mysql:5.7
    env_file:
      - ./deploy/env/mysql.env
    environment:
      - KEY_SUFFIX=mysql_master
    privileged: true
    volumes:
      # mha 容器间共享目录
      - ./deploy/mysql/data/share_sshkeys:/root/share_sshkeys
      # mysql 配置文件
      - ./deploy/mysql/conf/mysql_master.cnf:/etc/mysql/mysql.conf.d/source/mysqld.cnf
      # myqsl 工作目录
      - ./deploy/mysql/data/master:/var/lib/mysql
      # mysql 数据初始化
      #- ./deploy/mysql/init/schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
      #- ./deploy/mysql/init/data.sql:/docker-entrypoint-initdb.d/2-data.sql
      # mysql_master 初始化配置
      - ./deploy/mysql/init/mysql_master.sh:/etc/init.d/init/3-mysql_init.sh
      # 挂载容器启动后要执行的脚本
      - ./deploy/mysql/script:/etc/init.d/script
    ports:
      - "3306:3306"
    #command: bash -c "sh /etc/init.d/script/ssh_generate_key.sh /etc/init.d/script/ssh_auth_keys.sh && /entrypoint.sh mysqld"
    # 容器启动后默认执行的命令
    # macbook M1芯片的小伙伴，需要加上下面platform
    platform: linux/x86_64
    networks:
      mydoc-net:
        ipv4_address: 172.25.0.201
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 10s
      retries: 10

  mysql_slave1:
    # 继承mysql_master的属性
    <<: *mysql_master
    env_file:
      - deploy/env/mysql.env
    environment:
      - KEY_SUFFIX=mysql_slave1
    container_name: mysql_slave1
    ports:
      - "33061:3306"
    # 启动依赖于 mysql_master
    depends_on:
      - mysql_master
    volumes:
      - ./deploy/mysql/data/share_sshkeys:/root/share_sshkeys
      - ./deploy/mysql/conf/mysql_slave1.cnf:/etc/mysql/mysql.conf.d/source/mysqld.cnf
      - ./deploy/mysql/data/slave1:/var/lib/mysql
      # - ./init/schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
      # - ./init/data.sql:/docker-entrypoint-initdb.d/2-data.sql
      # mysql_slave 初始化配置
      - ./deploy/mysql/init/mysql_slave.sh:/etc/init.d/init/3-mysql_init.sh
      - ./deploy/mysql/script:/etc/init.d/script
    #command: bash -c "sh /etc/init.d/script/ssh_generate_key.sh /etc/init.d/script/ssh_auth_keys.sh && /entrypoint.sh mysqld"
    networks:
      mydoc-net:
        ipv4_address: 172.25.0.202

  mysql_slave2:
    <<: *mysql_master
    env_file:
      - deploy/env/mysql.env
    environment:
      - KEY_SUFFIX=mysql_slave2
    container_name: mysql_slave2
    ports:
      - "33062:3306"
    depends_on:
      - mysql_master
    volumes:
      - ./deploy/mysql/data/share_sshkeys:/root/share_sshkeys
      - ./deploy/mysql/conf/mysql_slave2.cnf:/etc/mysql/mysql.conf.d/source/mysqld.cnf
      - ./deploy/mysql/data/slave2:/var/lib/mysql
      # - ./init/schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
      # - ./init/data.sql:/docker-entrypoint-initdb.d/2-data.sql
      - ./deploy/mysql/init/mysql_slave.sh:/etc/init.d/init/3-mysql_init.sh
      - ./deploy/mysql/script:/etc/init.d/script
    #command: bash -c "sh /etc/init.d/script/ssh_generate_key.sh /etc/init.d/script/ssh_auth_keys.sh && /entrypoint.sh mysqld"
    networks:
      mydoc-net:
        ipv4_address: 172.25.0.203

  mha_manager:
    image: hooray/mha4mysql-manager
    environment:
      - KEY_SUFFIX=mha_manager
    container_name: mha_manager
    depends_on:
      - mysql_master
      - mysql_slave1
      - mysql_slave2
    restart: "no"
    volumes:
      - ./deploy/mysql/data/share_sshkeys:/root/share_sshkeys
      # 挂载mha配置文件
      - ./deploy/mysql/conf/mha_manager.cnf:/etc/mha/mha_manager.cnf
      # 修复mha无法解析长名称mysql的问题
      - ./deploy/mysql/init/NodeUtil.pm:/usr/share/perl5/MHA/NodeUtil.pm
      # 挂载mha数据文件
      - ./deploy/mysql/data/mha_manager:/var/log/masterha/
      - ./deploy/mysql/init/mha_manager.sh:/etc/init.d/mha_manager.sh
      - ./deploy/mysql/script:/etc/init.d/script
    #command: bash -c "sh /etc/init.d/script/ssh_generate_key.sh && sh /etc/init.d/script/ssh_auth_keys.sh && sh /etc/init.d/mha_manager.sh"
    # 防止启动后退出
    entrypoint: "tail -f /dev/null"
    networks:
      mydoc-net:
        ipv4_address: 172.25.0.204

  canal-server:
    image: canal/canal-server:v1.1.4
    container_name: canal-server
    ports:
      - "11111:11111"
    environment:
      - canal.instance.mysql.slaveId=12   # slaveId 不与其他重复即可
      - canal.auto.scan=true                # 自动扫描
      - canal.destinations=nly-v1         #  client 需要指定此 dest
      - canal.instance.master.address=172.25.0.201:3306   # mysql 地址
      - canal.instance.dbUsername=admin               # mysql username
      - canal.instance.dbPassword=adminpassword        # mysql 密码
      - canal.instance.connectionCharset=UTF-8
    volumes:
      - ./deploy/canal/conf:/home/admin/canal-server/conf
      - ./deploy/canal/logs:/home/admin/canal-server/logs
    networks:
      mydoc-net:
        ipv4_address: 172.25.0.111

  redis-master: &redis-master    #自定义服务名
    image: redis:6.0.16     #我们所需要运行的镜像，没有的话，会自定为我们下载
    container_name: redis-master  #镜像运行后的容器名，自定义
    ports:
      - 6379:6379           #宿主机的6379映射容器内部的6379端口
    volumes:  #目录挂载 。分号 ： 右边代表容器内部的目录，分号左边表示宿主机的目录，
      - ./deploy/redis/redis-master/conf:/conf
      - ./deploy/redis/redis-master/data:/data
    command: bash -c "redis-server /conf/redis.conf"  #容器启动后，运行的命令
    networks:
      mydoc-net:
        ipv4_address: 172.25.0.101

  redis-slave-1:
    <<: *redis-master
    image: redis:6.0.16
    container_name: redis-slave-1
    ports:
      - 6380:6379
    volumes:
      - ./deploy/redis/redis-slave-1/conf:/conf
      - ./deploy/redis/redis-slave-1/data:/data
    command: bash -c "redis-server /conf/redis.conf"
    depends_on:
      - redis-master
    networks:
      mydoc-net:
        ipv4_address: 172.25.0.102

  redis-slave-2:
    <<: *redis-master
    image: redis:6.0.16
    container_name: redis-slave-2
    ports:
      - 6381:6379
    volumes:
      - ./deploy/redis/redis-slave-2/conf:/conf
      - ./deploy/redis/redis-slave-2/data:/data
    command: bash -c "redis-server /conf/redis.conf"
    depends_on:
      - redis-master
    networks:
      mydoc-net:
        ipv4_address: 172.25.0.103

  redis-sentinel-1:
    <<: *redis-master
    image: redis:6.0.16
    container_name: redis-sentinel-1
    ports:
      - 26379:23679
    volumes:
      - ./deploy/redis/redis-sentinel-1/data:/data
      - ./deploy/redis/redis-sentinel-1/conf:/etc/conf
    command: bash -c "redis-sentinel /etc/conf/sentinel.conf && chmod 777 /etc/conf/sentinel.conf"
    depends_on:
      - redis-master
      - redis-slave-1
      - redis-slave-2
    networks:
      - mydoc-net

  redis-sentinel-2:
    <<: *redis-master
    image: redis:6.0.16
    container_name: redis-sentinel-2
    ports:
      - 26380:23679
    volumes:
      - ./deploy/redis/redis-sentinel-2/data:/data
      - ./deploy/redis/redis-sentinel-2/conf:/etc/conf
    command: bash -c "redis-sentinel /etc/conf/sentinel.conf && chmod 777 /etc/conf/sentinel.conf"
    depends_on:
      - redis-master
      - redis-slave-1
      - redis-slave-2
    networks:
      - mydoc-net

networks:
  mydoc-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/24
